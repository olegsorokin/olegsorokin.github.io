'use strict';

// Начало фикса Array.from для IE
// Шаги алгоритма ECMA-262, 6-е издание, 22.1.2.1
// Ссылка: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from
if (!Array.from) {
  Array.from = function () {
    var toStr = Object.prototype.toString;
    var isCallable = function isCallable(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function toInteger(value) {
      var number = Number(value);
      if (isNaN(number)) {
        return 0;
      }
      if (number === 0 || !isFinite(number)) {
        return number;
      }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function toLength(value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    };

    // Свойство length метода from равно 1.
    return function from(arrayLike /*, mapFn, thisArg */) {
      // 1. Положим C равным значению this.
      var C = this;

      // 2. Положим items равным ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      }

      // 4. Если mapfn равен undefined, положим mapping равным false.
      var mapFn = arguments[1];
      if (typeof mapFn !== 'undefined') {
        mapFn = arguments.length > 1 ? arguments[1] : void undefined;
        // 5. иначе
        // 5. a. Если вызов IsCallable(mapfn) равен false, выкидываем исключение TypeError.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        }

        // 5. b. Если thisArg присутствует, положим T равным thisArg; иначе положим T равным undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Положим lenValue равным Get(items, "length").
      // 11. Положим len равным ToLength(lenValue).
      var len = toLength(items.length);

      // 13. Если IsConstructor(C) равен true, то
      // 13. a. Положим A равным результату вызова внутреннего метода [[Construct]]
      //     объекта C со списком аргументов, содержащим единственный элемент len.
      // 14. a. Иначе, положим A равным ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Положим k равным 0.
      var k = 0;
      // 17. Пока k < len, будем повторять... (шаги с a по h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Положим putStatus равным Put(A, "length", len, true).
      A.length = len;
      // 20. Вернём A.
      return A;
    };
  }();
}
// Конец фикса Array.from для IE

var truncate = function truncate(str) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;
  var postf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '...';

  if (str.length > size) {
    return str.substring(0, size - postf.length) + postf;
  }
  return str;
};

var request = new XMLHttpRequest();
request.open('GET', '/data/news/news.json', true);

request.onload = function () {
  if (request.status >= 200 && request.status < 400) {
    var data = JSON.parse(request.responseText);
    var newsList = document.getElementById('news__list');

    var articles = data.reduce(function (acc, article) {
      var maxLength = 400;
      var moreLink = '<a href="" class="news__link news__link--hide">more ></a>';
      if (article.body.length > maxLength) {
        moreLink = '<a href="" class="news__link">more ></a>';
      }
      return '\n        ' + acc + '\n        <article class="news__article">\n          <div class="news__header">\n            <h3 class="news__title">' + article.title + '</h3>\n            <span class="news__date">' + article.date + '</span>\n          </div>\n          <p class="news__body">' + truncate(article.body, maxLength) + '</p>\n          ' + moreLink + '\n        </article>\n        <div class="news__bot-line"></div>\n      ';
    }, '');
    newsList.innerHTML = articles;

    var bodies = document.getElementsByClassName('news__body');

    Array.from(document.getElementsByClassName('news__link')).forEach(function (element, index, links) {
      element.addEventListener('click', function (event) {
        event.preventDefault();
        if (links[index].getAttribute('data-state') === 'full') {
          bodies[index].innerHTML = truncate(data[index].body, 400);
          links[index].innerHTML = 'more >';
          links[index].setAttribute('data-state', 'truncated');
        } else {
          bodies[index].innerHTML = data[index].body;
          links[index].innerHTML = 'hide <';
          links[index].setAttribute('data-state', 'full');
        }
      });
    });
  } else console.log('server error: ', request.status);
};

request.onerror = function () {
  return console.log('loading error');
};

request.send();
'use strict';

var getClass = function getClass(indexClass) {
  return document.getElementsByClassName(indexClass);
};
var getId = function getId(indexId) {
  return document.getElementById(indexId);
};

var sliderItems = getClass('slider__item');
var sliderLength = sliderItems.length;

var outerWidth = function outerWidth(el) {
  var width = el.offsetWidth;
  var style = getComputedStyle(el);

  width += parseInt(style.marginLeft) + parseInt(style.marginRight);
  return width;
};

var slideWidth = outerWidth(getClass('slider__img')[0]);

var insert = function insert(first, last) {
  return getId('slider__body').insertBefore(first, last);
};

var margin = 0;

var sliderAnimate = function sliderAnimate() {
  var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (margin > -slideWidth) {
    margin -= 1;
    sliderItems[0].style.marginLeft = String(margin) + 'px';
    setTimeout(function () {
      return sliderAnimate(speed, delay);
    }, speed);
  } else if (margin <= -slideWidth) {
    sliderItems[0].style.marginLeft = '0px';
    insert(sliderItems[0], sliderItems[sliderLength + 1]);
    margin = 0;
    setTimeout(function () {
      return sliderAnimate(speed, delay);
    }, delay);
  }
};

sliderAnimate();